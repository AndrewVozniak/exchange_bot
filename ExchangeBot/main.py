from email import message
import telebot
from telebot import *
from subprocess import Popen
import handlers.config as cfg
import requests
from threading import Thread
import dotenv
import handlers.database as db


# ! DATABASE CONNECTION
database = db.connect("localhost","root", "root", "exchange_bot")
mycursor = database.cursor(buffered=True)

db.execute(mycursor, "SELECT * FROM `config`")
config = mycursor.fetchone()



cancelKeyboard = telebot.types.ReplyKeyboardMarkup(True, False)
cancelKeyboard.row('–û—Ç–º–µ–Ω–∞')




dotenv_file = dotenv.find_dotenv()
dotenv.load_dotenv(dotenv_file)
token = config[5]
adminPassword = config[6]
bot = telebot.TeleBot(token)


script = Popen(['python','./view.py']) # python –µ—Å–ª–∏ –Ω–∞ Windows | python3 –µ—Å–ª–∏ –Ω–∞ Linux

def checkList(data, array):
    array = list(array)
    for x in array:
        if int(data) == int(x[1]):
            return 1
        else:
            pass

    

def saveChatID(message):
    global database

    # ? DATABASE SELECT ADMINS IDS
    db.execute(mycursor, "SELECT * FROM `admins`")
    id_list = list(mycursor.fetchall())

    if checkList(message.chat.id, id_list) != 1:      
        sql = f"INSERT INTO admins (telegram_id) VALUES ({message.chat.id})"
        mycursor.execute(sql)

        database.commit()
        return True

    else:
        pass



def restartScript():
    global script 
    
    script.kill()
    script = Popen(['python','./view.py']) # python –µ—Å–ª–∏ –Ω–∞ Windows | python3 –µ—Å–ª–∏ –Ω–∞ Linux
    print('restarted')




def saveENV(message, key):
    global database
    
    home_bt = types.InlineKeyboardButton(text="–ù–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É", callback_data="home")
    keyboard = types.InlineKeyboardMarkup().add(home_bt)

    # ? UPDATING DATA IN DB
    sql = f"UPDATE `config` SET `{key}`='{message.text}' WHERE 1"
    mycursor.execute(sql)
    database.commit()

    # ? SUCCESSFUL MSG
    if(key == "ADMIN_PASSWORD"):
        global adminPassword
        bot.send_message(message.chat.id, f"""–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã. 
–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –æ—Ç –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - {message.text}. 
–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –Ω–µ –∑–∞–±—ã—Ç—å –µ–≥–æ""", reply_markup=keyboard)
        adminPassword = message.text
        return adminPassword

    else:
        restartScript()
        bot.send_message(message.chat.id, f"""–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã. 
–¢–µ–∫—É—â–∏–µ - {message.text}. 
–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!""", reply_markup=keyboard)



#! CHECKING NEW REQUEST TO EXCHANGE

def sendExchangerInfo():
    exc = db.connect("localhost","root", "root", "exchange_bot")

    operationsCursor = exc.cursor(buffered=True)
    adminsCursor = exc.cursor(buffered=True)

    while True:
        try:
            time.sleep(3)
            
            operationsCursor.execute(f"SELECT * FROM `operations` ORDER BY `operations`.`id` DESC")
            operation = operationsCursor.fetchone()

            adminsCursor.execute(f"SELECT * FROM `admins` WHERE 1")
            admins = adminsCursor.fetchall()


            if operation[0] != cfg.latestID: # ? –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–¥ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º–æ
                for x in admins:
                    bot.send_message(x[1], f"""‚úÖ –ü—Ä–∏–≤–µ—Ç –ø–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞:
`–ù–æ–º–µ—Ä:` {operation[0]}
`–¢–∏–ø:` {operation[1]};
`–ú–æ–Ω–µ—Ç–∞:` {operation[2]};
`–°—Ä–µ–¥—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∞:` {operation[3]};
`–°—É–º–º–∞:` {operation[4]} USD;
`User ID:` {operation[5]};
`User Name:` @{operation[6]};
    """, parse_mode="Markdown")

                cfg.latestID = operation[0]
            operationsCursor.close()
            adminsCursor.close()
            exc.close()

            exc = db.connect("localhost","root", "root", "exchange_bot")
            operationsCursor = exc.cursor(buffered=True)
            adminsCursor = exc.cursor(buffered=True)
        except: 
            pass
        

        
t = Thread(target=sendExchangerInfo)
t.start()

        
        








def adminScreen(message):
    card_bt = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="card")
    btc_bt = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å btc –∫–æ—à–µ–ª—ë–∫", callback_data="btc")

    support_bt = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–ø–ø–æ—Ä—Ç–∞", callback_data="support")
    rules_bt = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞", callback_data="rules")
    bot_name_bt = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞", callback_data="bot_name")

    token_bt = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="token")
    password_bt = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data="password")
    operations_bt = types.InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="operations")
    coin_bt = types.InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", callback_data="coin")
    reload_bt = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞", callback_data="reload")
    info_bt = types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="information")
    
    keyboard = types.InlineKeyboardMarkup(row_width=2).add(info_bt)
    keyboard.add(card_bt, btc_bt, rules_bt, support_bt, password_bt, coin_bt, operations_bt, bot_name_bt, reload_bt, token_bt)

    bot.send_message(message.chat.id, f"""*‚ù§Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É! ‚ù§Ô∏è*
""", parse_mode="Markdown", reply_markup=keyboard)














def changeCrypto(message, row, key):
    global database
    
    home_bt = types.InlineKeyboardButton(text="–ù–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É", callback_data="home")
    keyboard = types.InlineKeyboardMarkup().add(home_bt)

    # ? UPDATING DATA IN DB
    sql = f"UPDATE `coins` SET `{row}`='{message.text}' WHERE name = '{key}'"
    mycursor.execute(sql)
    database.commit()

    bot.send_message(message.chat.id, f"""–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã. 
–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ {row} | {key} - {message.text}. """, reply_markup=keyboard)
    restartScript()
    cfg.getCryptos()


def addCryptoStady_Name(message):
    global cancelKeyboard
    if message.text != "–û—Ç–º–µ–Ω–∞":
        name = message.text
        bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—Å.—Å—Å—ã–ª–∫—É –¥–ª—è {name}", reply_markup=cancelKeyboard)
        bot.register_next_step_handler(message, addCryptoStady_Link, name)


    elif message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, f"""üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ""")
        adminScreen(message)
        return False


def addCryptoStady_Link(message, name):
    global database

    if(requests.get(message.text).json) and message.text != "–û—Ç–º–µ–Ω–∞":
        link = message.text
        sql = f"INSERT INTO coins (name, parse_link) VALUES ('{name}', '{link}')"
        mycursor.execute(sql)

        database.commit()
        restartScript()
        cfg.getCryptos()

        bot.send_message(message.chat.id, f"""{name} –î–æ–±–∞–≤–ª–µ–Ω–∞. 
–ö–æ–º–º–∏—Å–∏—é –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.
""")
        adminScreen(message)


    elif message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, f"""üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ""")
        adminScreen(message)
        return False























# ! CHATBOT
@bot.message_handler(content_types=["text"])
def checkUser(message):

    # ? DATABASE SELECT ADMINS IDS
    db.execute(mycursor, "SELECT * FROM `admins`")
    id_list = list(mycursor.fetchall())

    # ? –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ admins. –ï—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å 
    if checkList(message.chat.id, id_list) == 1:
        adminScreen(message)
    elif message.text == adminPassword:
        saveChatID(message)
        adminScreen(message)
    else:
        bot.send_message(message.chat.id, f"""–ò–∑–≤–∏–Ω–∏, —è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–æ—Ç, —è –Ω–∏—á–µ–≥–æ –Ω–µ —É–º–µ—é –¥–µ–ª–∞—Ç—å :(""")


def saveData(message, key):
    # ? DATABASE SELECT ADMINS IDS
    db.execute(mycursor, "SELECT * FROM `admins`")
    id_list = list(mycursor.fetchall())
    
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ admins.txt. –ï—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –¥–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–∞–º, –∏–Ω–∞—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å 
    if checkList(message.chat.id, id_list) == 1 and message.text != "–û—Ç–º–µ–Ω–∞":
        saveENV(message, key)

    elif message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, f"""üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ""")
        adminScreen(message)
        return False
        
    else:
        bot.send_message(message.chat.id, f"""–ò–∑–≤–∏–Ω–∏, —è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–æ—Ç, —è –Ω–∏—á–µ–≥–æ –Ω–µ —É–º–µ—é –¥–µ–ª–∞—Ç—å :(""")


@bot.callback_query_handler(func=lambda call: True)
def purchaseScreen(call):
    global cancelKeyboard
    global config
    global mycursor

    if call.message:
        if call.data == "home":
            adminScreen(call.message)

        if call.data == "token":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω", reply_markup=cancelKeyboard)
            bot.register_next_step_handler(call.message, saveData, "BOT_TOKEN")

        if call.data == "btc":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞", reply_markup=cancelKeyboard)
            bot.register_next_step_handler(call.message, saveData, "BTC")

        if call.data == "card":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã", reply_markup=cancelKeyboard)
            bot.register_next_step_handler(call.message, saveData, "CARD_NUMBER")

        if call.data == "rules":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞", reply_markup=cancelKeyboard)
            bot.register_next_step_handler(call.message, saveData, "RULES")

        if call.data == "password":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω –ø–∞—Ä–æ–ª—å", reply_markup=cancelKeyboard)
            bot.register_next_step_handler(call.message, saveData, "ADMIN_PASSWORD")

        if call.data == "support":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–∞–ø–æ—Ä—Ç–∞", reply_markup=cancelKeyboard)
            bot.register_next_step_handler(call.message, saveData, "CARD_NUMBER")

        if call.data == "operations":
            mycursor.execute(f"SELECT * FROM operations WHERE 1")

            operations = mycursor.fetchall()

            bot.send_message(call.message.chat.id, reply_markup=cancelKeyboard, text=f"""üîÑ –ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤""")
            for x in operations:
                bot.send_message(call.message.chat.id, reply_markup=cancelKeyboard, text=f"""`–ù–æ–º–µ—Ä:` {x[0]};
`–¢–∏–ø:` {x[1]};
`–ú–æ–Ω–µ—Ç–∞:` {x[2]};
`–°—Ä–µ–¥—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∞:` {x[3]};
`–°—É–º–º–∞:` {x[4]} USD;
`User ID:` {x[5]};
`User Name:` {x[6]};
""", parse_mode="Markdown")


        if call.data == "bot_name":
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è –±–æ—Ç–∞", reply_markup=cancelKeyboard)
            bot.register_next_step_handler(call.message, saveData, "BOT_NAME")


        if call.data == "reload":
            restartScript()
            bot.send_message(call.message.chat.id, f"–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω.") 


        if call.data == "information":
            bot.send_message(call.message.chat.id, f"""*–¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*

*–ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã*
–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã - {config[2]}
–ù–æ–º–µ—Ä BTC –∫–æ—à–µ–ª—å–∫–∞ - {config[1]}
""", parse_mode="Markdown") 

            bot.send_message(call.message.chat.id, f"""–¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

–°–∞–ø–æ—Ä—Ç - {config[7]}

--------------------------------

–ü—Ä–∞–≤–∏–ª–∞:
{config[4]}
""") 


            bot.send_message(call.message.chat.id, f"""–¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

–°–∏—Å—Ç–µ–º–Ω—ã–µ
–ò–º—è –±–æ—Ç–∞ - {config[4]}

–¢–æ–∫–µ–Ω –±–æ—Ç–∞ - {config[0]}  

–¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∫–∏ - {config[5]}

–ü–∞—Ä–æ–ª—å –æ—Ç –∞–¥–º–∏–Ω–∫–∏ - {config[6]}
""") 
















        #! CHANGE COIN
        #? LIST OF ALL COINS
        if call.data == 'coin':
            cryptoCursor = database.cursor()
            db.execute(cryptoCursor, "SELECT * FROM `coins`")
            cryptos = cryptoCursor.fetchall()

            keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
            cryptos_bt = [types.InlineKeyboardButton(i[1], callback_data=f"coin-{i[1]}") for i in cryptos]
            add_bt = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É", callback_data=f"addCoin")
            keyboard.add(*cryptos_bt, add_bt)

            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É", reply_markup=keyboard)  
            cryptoCursor.close()      

        if call.data == 'addCoin':
            print(call.data.partition('-')[2])
            bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", reply_markup=cancelKeyboard)
            bot.register_next_step_handler(call.message, addCryptoStady_Name)







        #? SET UP COIN
        if call.data.startswith('coin-'):
            keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
            commision_bt = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é", callback_data=f"commission-{call.data.partition('-')[2]}")
            link_bt = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä—Å.—Å—Å—ã–ª–∫—É", callback_data=f"parse_link-{call.data.partition('-')[2]}")
            delete_bt = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data=f"delete-{call.data.partition('-')[2]}")
            keyboard.add(commision_bt, link_bt, delete_bt)

            bot.send_message(call.message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboard)

            
        if call.data.startswith('commission-'):
            print(call.data.partition('-')[2])
            bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏ –Ω–æ–≤–≤—É—é –∫–æ–º–∏—Å–∏—é –Ω–∞ {call.data.partition('-')[2]}", reply_markup=cancelKeyboard)
            bot.register_next_step_handler(call.message, changeCrypto, 'commission', call.data.partition('-')[2])

        if call.data.startswith('parse_link-'):
            print(call.data.partition('-')[2])
            bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ {call.data.partition('-')[2]}", reply_markup=cancelKeyboard)
            bot.register_next_step_handler(call.message, changeCrypto, 'parse_link', call.data.partition('-')[2])

        if call.data.startswith('delete-'):
            print(f"DELETE FROM `coins` WHERE `coins`.`name` = '{call.data.partition('-')[2]}'")
            mycursor.execute(f"DELETE FROM `coins` WHERE `coins`.`name` = '{call.data.partition('-')[2]}'")

            database.commit()

            bot.send_message(call.message.chat.id, f"{call.data.partition('-')[2]} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            restartScript()




if __name__ == '__main__':
    bot.infinity_polling()